#!/bin/bash

# üè• Script de Verifica√ß√£o de Sa√∫de do TaPago
# Verifica se todos os servi√ßos est√£o funcionando corretamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

echo -e "${BLUE}üè• Verifica√ß√£o de Sa√∫de do TaPago${NC}"
echo "=================================="

# Verificar se Docker est√° rodando
log_info "Verificando Docker..."
if docker --version > /dev/null 2>&1; then
    log_success "Docker est√° instalado e rodando"
else
    log_error "Docker n√£o est√° dispon√≠vel"
    exit 1
fi

# Verificar se docker-compose.yml existe
if [ ! -f "docker-compose.yml" ]; then
    log_error "docker-compose.yml n√£o encontrado"
    exit 1
fi

# Verificar status dos containers
log_info "Verificando status dos containers..."
CONTAINERS_STATUS=$(docker-compose ps --services --filter "status=running")

if echo "$CONTAINERS_STATUS" | grep -q "app"; then
    log_success "Container da aplica√ß√£o est√° rodando"
else
    log_error "Container da aplica√ß√£o n√£o est√° rodando"
fi

if echo "$CONTAINERS_STATUS" | grep -q "postgres"; then
    log_success "Container do PostgreSQL est√° rodando"
else
    log_error "Container do PostgreSQL n√£o est√° rodando"
fi

# Verificar conectividade com o banco
log_info "Testando conex√£o com banco de dados..."
if docker-compose exec -T postgres pg_isready -U postgres > /dev/null 2>&1; then
    log_success "Banco de dados est√° respondendo"
else
    log_error "Banco de dados n√£o est√° respondendo"
fi

# Verificar se aplica√ß√£o est√° respondendo
log_info "Testando aplica√ß√£o web..."
if command -v curl &> /dev/null; then
    if curl -f -s -m 10 http://localhost:3000 > /dev/null; then
        log_success "Aplica√ß√£o web est√° respondendo"
    else
        log_warning "Aplica√ß√£o web n√£o est√° respondendo na porta 3000"
    fi
else
    log_warning "curl n√£o est√° instalado, n√£o foi poss√≠vel testar a aplica√ß√£o web"
fi

# Verificar uso de recursos
log_info "Verificando uso de recursos..."
echo
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"

# Verificar logs recentes para erros
log_info "Verificando logs recentes para erros..."
ERROR_COUNT=$(docker-compose logs app --tail=50 2>/dev/null | grep -i "error\|exception\|failed" | wc -l)
if [ "$ERROR_COUNT" -gt 0 ]; then
    log_warning "Encontrados $ERROR_COUNT erros nos logs recentes"
    echo "√öltimos erros:"
    docker-compose logs app --tail=50 | grep -i "error\|exception\|failed" | tail -5
else
    log_success "Nenhum erro encontrado nos logs recentes"
fi

# Verificar espa√ßo em disco
log_info "Verificando espa√ßo em disco..."
DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
if [ "$DISK_USAGE" -gt 90 ]; then
    log_error "Espa√ßo em disco cr√≠tico: ${DISK_USAGE}% usado"
elif [ "$DISK_USAGE" -gt 80 ]; then
    log_warning "Espa√ßo em disco alto: ${DISK_USAGE}% usado"
else
    log_success "Espa√ßo em disco OK: ${DISK_USAGE}% usado"
fi

# Verificar uso do Docker
log_info "Verificando uso do Docker..."
docker system df

echo
echo "=================================="
log_info "Verifica√ß√£o de sa√∫de conclu√≠da!"

# Resumo final
echo
echo "üìä Resumo:"
echo "- Containers rodando: $(docker-compose ps --services --filter 'status=running' | wc -l)/2"
echo "- Uso de disco: ${DISK_USAGE}%"
echo "- Erros recentes: $ERROR_COUNT"

if [ "$ERROR_COUNT" -eq 0 ] && [ "$DISK_USAGE" -lt 80 ]; then
    log_success "Sistema est√° saud√°vel! üéâ"
else
    log_warning "Sistema precisa de aten√ß√£o! ‚ö†Ô∏è"
fi