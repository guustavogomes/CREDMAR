generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String
  password            String
  role                Role                 @default(USER)
  status              UserStatus           @default(ACTIVE)
  resetToken          String?
  resetTokenExpiry    DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  customers           Customer[]
  creditors           Creditor[]
  loans               Loan[]
  passwordResetTokens PasswordResetToken[]
  routes              Route[]
  cashFlows           CashFlow[]

  @@map("users")
}



model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Route {
  id          String     @id @default(cuid())
  description String
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  loans       Loan[]     // Mudança: rotas agora se relacionam com empréstimos
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("routes")
}

model Customer {
  id           String    @id @default(cuid())
  cpf          String
  nomeCompleto String
  celular      String
  cep          String?
  endereco     String?
  cidade       String?
  estado       String?
  bairro       String?
  referencia   String?
  foto         String?
  userId       String
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  loans        Loan[]

  @@unique([cpf, userId], name: "unique_cpf_per_user")
  @@map("customers")
}

model Creditor {
  id           String     @id @default(cuid())
  cpf          String
  nome         String
  telefone     String?
  email        String?
  endereco     String?
  cidade       String?
  estado       String?
  observacoes  String?
  isManager    Boolean    @default(false)
  userId       String
  deletedAt    DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  loans        Loan[]     @relation("CreditorLoans")
  cashFlows    CashFlow[]

  @@unique([cpf, userId], name: "unique_creditor_cpf_per_user")
  @@index([userId, isManager])
  @@map("creditors")
}

model Periodicity {
  id               String   @id @default(cuid())
  name             String   @unique
  description      String?
  intervalType     String   @default("MONTHLY")
  intervalValue    Int      @default(1)
  allowedWeekdays  String?
  allowedMonthDays String?
  allowedMonths    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  loans            Loan[]

  @@map("periodicities")
}

model Loan {
  id                    String        @id @default(cuid())
  customerId            String?       // Cliente que recebe o empréstimo (opcional)
  creditorId            String?       // Credor que empresta o dinheiro (opcional)
  routeId               String?       // Rota/Intermediador do empréstimo (opcional)
  transactionDate       DateTime      @default(now())
  totalAmount           Float
  loanType              String            @default("PRICE")
  interestRate          Float             @default(2.5)
  periodicityId         String
  installments          Int
  installmentValue      Float
  nextPaymentDate       DateTime
  status                LoanStatus    @default(ACTIVE)
  observation           String?
  commission            Float?        // Comissão do intermediador em % (opcional, apenas quando rota for selecionada)
  creditorCommission    Float?        // Comissão do credor em % (opcional, apenas quando credor for selecionado)
  userId                String
  deletedAt             DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  installmentRecords    Installment[]
  customer              Customer?     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  creditor              Creditor?     @relation("CreditorLoans", fields: [creditorId], references: [id], onDelete: Cascade)
  route                 Route?        @relation(fields: [routeId], references: [id], onDelete: SetNull)
  periodicity           Periodicity   @relation(fields: [periodicityId], references: [id])
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cashFlows             CashFlow[]

  @@map("loans")
}

model Installment {
  id                String            @id @default(cuid())
  loanId            String
  installmentNumber Int
  dueDate           DateTime
  amount            Float
  paidAmount        Float             @default(0)
  fineAmount        Float             @default(0)
  status            InstallmentStatus @default(PENDING)
  proofImage        String?
  proofStatus       ProofStatus       @default(PENDING)
  paidAt            DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  loan              Loan              @relation(fields: [loanId], references: [id], onDelete: Cascade)
  cashFlows         CashFlow[]

  @@map("installments")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}



enum InstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

enum LoanStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ProofStatus {
  PENDING
  APPROVED
  REJECTED
}

model CashFlow {
  id            String           @id @default(cuid())
  creditorId    String
  type          CashFlowType
  category      CashFlowCategory
  amount        Float
  description   String?
  loanId        String?
  installmentId String?
  userId        String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  creditor      Creditor         @relation(fields: [creditorId], references: [id], onDelete: Restrict)
  loan          Loan?            @relation(fields: [loanId], references: [id], onDelete: SetNull)
  installment   Installment?     @relation(fields: [installmentId], references: [id], onDelete: SetNull)
  user          User             @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@index([creditorId])
  @@index([type])
  @@index([category])
  @@index([createdAt])
  @@map("cash_flows")
}

enum CashFlowType {
  CREDIT
  DEBIT
}

enum CashFlowCategory {
  DEPOSIT
  WITHDRAWAL
  COMMISSION
  LOAN_DISBURSEMENT
  INTERMEDIATOR_COMMISSION
  MANAGER_COMMISSION
  LOAN_RETURN
}
