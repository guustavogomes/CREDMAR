generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  PENDING_PAYMENT
  PENDING_APPROVAL
  ACTIVE
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  BANK_SLIP
}

enum InstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String
  password            String
  role                Role                 @default(USER)
  status              UserStatus           @default(PENDING_PAYMENT)
  resetToken          String?              // Token para reset de senha
  resetTokenExpiry    DateTime?            // Expiração do token
  customers           Customer[]
  routes              Route[]
  payments            Payment[]
  passwordResetTokens PasswordResetToken[]
  loans               Loan[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  @@map("users")
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  amount      Float         @default(100.00)
  method      PaymentMethod @default(PIX)
  status      PaymentStatus @default(PENDING)
  description String?
  pixCode     String?
  proofImage  String?       // URL da imagem do comprovante
  month       String?       // Mês de referência (YYYY-MM)
  approvedBy  String?       // ID do admin que aprovou
  approvedAt  DateTime?
  rejectedAt  DateTime?
  rejectionReason String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)
  
  @@map("password_reset_tokens")
}

model Route {
  id          String     @id @default(cuid())
  description String
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers   Customer[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("routes")
}

model Customer {
  id           String   @id @default(cuid())
  cpf          String
  nomeCompleto String
  celular      String
  cep          String
  endereco     String
  cidade       String
  estado       String
  bairro       String
  referencia   String?
  routeId      String?
  foto         String?
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  route        Route?   @relation(fields: [routeId], references: [id])
  loans        Loan[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([cpf, userId], name: "unique_cpf_per_user")
  @@map("customers")
}

model Periodicity {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  
  // Configurações de vencimento
  intervalType    String   @default("MONTHLY") // "DAILY", "WEEKLY", "MONTHLY", "YEARLY"
  intervalValue   Int      @default(1) // A cada X dias/semanas/meses
  
  // Para controle de dias da semana (0=Domingo, 1=Segunda, ..., 6=Sábado)
  allowedWeekdays String?  // JSON array: "[1,2,3,4,5]" para seg-sex
  
  // Para controle de dias do mês
  allowedMonthDays String? // JSON array: "[1,15]" para dia 1 e 15
  
  // Para controle de meses do ano
  allowedMonths   String?  // JSON array: "[1,4,7,10]" para trimestral
  
  loans       Loan[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("periodicities")
}

model Loan {
  id              String        @id @default(cuid())
  customerId      String
  transactionDate DateTime      @default(now())
  totalAmount     Float
  advanceAmount   Float
  periodicityId   String
  installments    Int
  installmentValue Float
  nextPaymentDate DateTime
  status          LoanStatus    @default(ACTIVE)
  userId          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  customer        Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  periodicity     Periodicity   @relation(fields: [periodicityId], references: [id])
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  installmentRecords Installment[]
  
  @@map("loans")
}

enum LoanStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ProofStatus {
  PENDING
  APPROVED
  REJECTED
}

model Installment {
  id                String            @id @default(cuid())
  loanId            String
  installmentNumber Int
  dueDate           DateTime
  amount            Float
  paidAmount        Float             @default(0)
  fineAmount        Float             @default(0)
  status            InstallmentStatus @default(PENDING)
  proofImage        String?
  proofStatus       ProofStatus       @default(PENDING)
  paidAt            DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  loan              Loan              @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("installments")
}












