generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  name                String
  password            String
  role                Role                 @default(USER)
  status              UserStatus           @default(PENDING_PAYMENT)
  activatedAt         DateTime?
  resetToken          String?
  resetTokenExpiry    DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  customers           Customer[]
  loans               Loan[]
  passwordResetTokens PasswordResetToken[]
  payments            Payment[]
  routes              Route[]

  @@map("users")
}

model Payment {
  id                     String        @id @default(cuid())
  userId                 String
  amount                 Float         @default(100.00)
  method                 PaymentMethod @default(PIX)
  status                 PaymentStatus @default(PENDING)
  description            String?
  pixCode                String?
  proofImage             String?
  transactionId          String?
  month                  String?
  approvedBy             String?
  approvedAt             DateTime?
  rejectedAt             DateTime?
  rejectionReason        String?
  asaasPaymentId         String?
  asaasCustomerId        String?
  asaasExternalReference String?
  asaasPixQrCode         String?
  asaasPixPayload        String?
  asaasDueDate           DateTime?
  asaasNetValue          Float?
  asaasOriginalValue     Float?
  asaasInterestValue     Float?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  user                   User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model Route {
  id          String     @id @default(cuid())
  description String
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  customers   Customer[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("routes")
}

model Customer {
  id           String    @id @default(cuid())
  cpf          String
  nomeCompleto String
  celular      String
  cep          String
  endereco     String
  cidade       String
  estado       String
  bairro       String
  referencia   String?
  routeId      String?
  foto         String?
  userId       String
  deletedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  route        Route?    @relation(fields: [routeId], references: [id])
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  loans        Loan[]

  @@unique([cpf, userId], name: "unique_cpf_per_user")
  @@map("customers")
}

model Periodicity {
  id               String   @id @default(cuid())
  name             String   @unique
  description      String?
  intervalType     String   @default("MONTHLY")
  intervalValue    Int      @default(1)
  allowedWeekdays  String?
  allowedMonthDays String?
  allowedMonths    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  loans            Loan[]

  @@map("periodicities")
}

model Loan {
  id                    String        @id @default(cuid())
  customerId            String
  transactionDate       DateTime      @default(now())
  totalAmount           Float
  amountWithoutInterest Float
  periodicityId         String
  installments          Int
  installmentValue      Float
  nextPaymentDate       DateTime
  status                LoanStatus    @default(ACTIVE)
  observation           String?
  userId                String
  deletedAt             DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  installmentRecords    Installment[]
  customer              Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  periodicity           Periodicity   @relation(fields: [periodicityId], references: [id])
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model Installment {
  id                String            @id @default(cuid())
  loanId            String
  installmentNumber Int
  dueDate           DateTime
  amount            Float
  paidAmount        Float             @default(0)
  fineAmount        Float             @default(0)
  status            InstallmentStatus @default(PENDING)
  proofImage        String?
  proofStatus       ProofStatus       @default(PENDING)
  paidAt            DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  loan              Loan              @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("installments")
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  PENDING_PAYMENT
  PENDING_APPROVAL
  ACTIVE
  SUSPENDED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  PIX
}

enum InstallmentStatus {
  PENDING
  PAID
  OVERDUE
}

enum LoanStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ProofStatus {
  PENDING
  APPROVED
  REJECTED
}
