# üöÄ Script de Atualiza√ß√£o do TaPago na VPS (PowerShell)
# Este script automatiza o processo de atualiza√ß√£o da aplica√ß√£o

param(
    [switch]$SkipBackup,
    [switch]$ForceRebuild,
    [switch]$SkipCleanup
)

# Configurar cores
$Host.UI.RawUI.ForegroundColor = "White"

function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Log-Info($message) {
    Write-ColorOutput Blue "‚ÑπÔ∏è  $message"
}

function Log-Success($message) {
    Write-ColorOutput Green "‚úÖ $message"
}

function Log-Warning($message) {
    Write-ColorOutput Yellow "‚ö†Ô∏è  $message"
}

function Log-Error($message) {
    Write-ColorOutput Red "‚ùå $message"
}

Write-ColorOutput Cyan "üöÄ Iniciando atualiza√ß√£o do TaPago na VPS..."

# Verificar se estamos no diret√≥rio correto
if (-not (Test-Path "docker-compose.yml")) {
    Log-Error "docker-compose.yml n√£o encontrado. Execute este script no diret√≥rio raiz do projeto."
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Verificar se Docker est√° rodando
try {
    docker version | Out-Null
} catch {
    Log-Error "Docker n√£o est√° rodando ou n√£o est√° instalado."
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Backup do banco de dados (opcional)
if (-not $SkipBackup) {
    $backup = Read-Host "Deseja fazer backup do banco de dados antes da atualiza√ß√£o? (y/n)"
    if ($backup -eq "y" -or $backup -eq "Y") {
        Log-Info "Criando backup do banco de dados..."
        if (-not (Test-Path "backups")) {
            New-Item -ItemType Directory -Path "backups" | Out-Null
        }
        $backupFile = "backups/backup_$(Get-Date -Format 'yyyyMMdd_HHmmss').sql"
        try {
            docker-compose exec -T postgres pg_dump -U postgres tapago | Out-File -FilePath $backupFile -Encoding UTF8
            Log-Success "Backup criado: $backupFile"
        } catch {
            Log-Warning "Erro ao criar backup: $_"
        }
    }
}

# Parar containers
Log-Info "Parando containers..."
docker-compose down

# Fazer backup dos arquivos de configura√ß√£o
Log-Info "Fazendo backup das configura√ß√µes..."
if (Test-Path ".env") {
    $backupEnv = ".env.backup.$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    Copy-Item ".env" $backupEnv
    Log-Success "Backup do .env criado: $backupEnv"
} else {
    Log-Warning "Arquivo .env n√£o encontrado"
}

# Atualizar c√≥digo do reposit√≥rio
Log-Info "Atualizando c√≥digo do reposit√≥rio..."
try {
    git stash push -m "Auto-stash before update $(Get-Date)"
    git pull origin main
    Log-Success "C√≥digo atualizado com sucesso!"
} catch {
    Log-Error "Erro ao atualizar c√≥digo: $_"
    Read-Host "Pressione Enter para continuar mesmo assim"
}

# Verificar se houve mudan√ßas importantes
$packageChanged = $false
$prismaChanged = $false

try {
    $changedFiles = git diff HEAD~1 HEAD --name-only
    if ($changedFiles -match "package\.json|package-lock\.json") {
        $packageChanged = $true
        Log-Warning "Depend√™ncias foram alteradas. Ser√° necess√°rio rebuild completo."
    }
    if ($changedFiles -match "prisma/schema\.prisma") {
        $prismaChanged = $true
        Log-Warning "Schema do Prisma foi alterado. Ser√° necess√°rio executar migra√ß√µes."
    }
} catch {
    Log-Warning "N√£o foi poss√≠vel verificar mudan√ßas. Fazendo rebuild por seguran√ßa."
    $packageChanged = $true
}

# Reconstruir e subir containers
Log-Info "Iniciando containers..."
if ($ForceRebuild -or $packageChanged) {
    Log-Info "Reconstruindo imagens Docker..."
    docker-compose up --build -d
} else {
    docker-compose up -d
}

# Aguardar containers ficarem prontos
Log-Info "Aguardando containers ficarem prontos..."
Start-Sleep -Seconds 10

# Executar migra√ß√µes do Prisma se necess√°rio
if ($prismaChanged) {
    Log-Info "Executando migra√ß√µes do Prisma..."
    try {
        docker-compose exec app npx prisma db push
        docker-compose exec app npx prisma generate
        Log-Success "Migra√ß√µes executadas com sucesso!"
    } catch {
        Log-Warning "Erro ao executar migra√ß√µes: $_"
    }
}

# Verificar se containers est√£o rodando
Log-Info "Verificando status dos containers..."
$status = docker-compose ps
if ($status -match "Up") {
    Log-Success "Containers est√£o rodando!"
} else {
    Log-Error "Alguns containers n√£o est√£o rodando. Verificando logs..."
    docker-compose logs --tail=20
}

# Mostrar logs recentes
Log-Info "Logs recentes da aplica√ß√£o:"
docker-compose logs app --tail=10

# Verificar se aplica√ß√£o est√° respondendo
Log-Info "Verificando se aplica√ß√£o est√° respondendo..."
Start-Sleep -Seconds 5

try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000" -TimeoutSec 10 -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Log-Success "Aplica√ß√£o est√° respondendo!"
    }
} catch {
    Log-Warning "Aplica√ß√£o pode n√£o estar respondendo na porta 3000"
}

# Limpeza de imagens antigas (opcional)
if (-not $SkipCleanup) {
    $cleanup = Read-Host "Deseja limpar imagens Docker antigas para economizar espa√ßo? (y/n)"
    if ($cleanup -eq "y" -or $cleanup -eq "Y") {
        Log-Info "Limpando imagens antigas..."
        docker image prune -f
        Log-Success "Limpeza conclu√≠da!"
    }
}

Log-Success "üéâ Atualiza√ß√£o conclu√≠da com sucesso!"
Write-ColorOutput Cyan "Para monitorar logs em tempo real: docker-compose logs -f app"
Write-ColorOutput Cyan "Para verificar status: docker-compose ps"

Write-Host ""
Write-ColorOutput Magenta "üìä Status atual dos containers:"
docker-compose ps

Read-Host "Pressione Enter para sair"