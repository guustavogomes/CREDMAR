// Teste espec√≠fico para a p√°gina de edi√ß√£o
const puppeteer = require('puppeteer');

async function testEditPage() {
  console.log('üß™ Testando P√°gina de Edi√ß√£o de Cliente...');
  
  const browser = await puppeteer.launch({ 
    headless: false, 
    defaultViewport: null,
    args: ['--start-maximized']
  });
  
  try {
    const page = await browser.newPage();
    
    // Login
    console.log('üîê Fazendo login...');
    await page.goto('http://localhost:3000/login');
    await page.waitForSelector('input[type="email"]');
    
    await page.type('input[type="email"]', 'empresa1@teste.com');
    await page.type('input[type="password"]', 'admin123');
    await page.click('button[type="submit"]');
    await page.waitForNavigation();
    
    // Ir direto para p√°gina de edi√ß√£o
    console.log('üìù Acessando p√°gina de edi√ß√£o...');
    await page.goto('http://localhost:3000/dashboard/clientes/cmdz5ifao000714n3k7644yz9/editar');
    
    // Aguardar carregamento
    await page.waitForSelector('form', { timeout: 15000 });
    
    // Aguardar um pouco mais para garantir que tudo carregou
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Verificar elementos na p√°gina
    const pageContent = await page.evaluate(() => {
      return {
        title: document.querySelector('h1')?.textContent || 'N√£o encontrado',
        hasForm: !!document.querySelector('form'),
        hasCpfInput: !!document.querySelector('input[id="cpf"]'),
        hasPhotoSection: !!document.querySelector('.bg-gray-50.rounded-lg'),
        hasCameraIcon: !!document.querySelector('label[for="foto-upload"]'),
        hasUploadInput: !!document.querySelector('input[type="file"]#foto-upload'),
        hasUserIcon: !!document.querySelector('svg'),
        allDivs: document.querySelectorAll('div').length,
        bodyHTML: document.body.innerHTML.includes('Se√ß√£o da Foto') ? 'Tem se√ß√£o de foto' : 'N√£o tem se√ß√£o de foto'
      };
    });
    
    console.log('üìä An√°lise da p√°gina:');
    console.log('  - T√≠tulo:', pageContent.title);
    console.log('  - Tem formul√°rio:', pageContent.hasForm ? '‚úÖ' : '‚ùå');
    console.log('  - Tem input CPF:', pageContent.hasCpfInput ? '‚úÖ' : '‚ùå');
    console.log('  - Tem se√ß√£o de foto:', pageContent.hasPhotoSection ? '‚úÖ' : '‚ùå');
    console.log('  - Tem √≠cone de c√¢mera:', pageContent.hasCameraIcon ? '‚úÖ' : '‚ùå');
    console.log('  - Tem input de upload:', pageContent.hasUploadInput ? '‚úÖ' : '‚ùå');
    console.log('  - Total de divs:', pageContent.allDivs);
    console.log('  - HTML cont√©m se√ß√£o:', pageContent.bodyHTML);
    
    // Tirar screenshot
    await page.screenshot({ path: 'edit-page-screenshot.png', fullPage: true });
    console.log('üì∏ Screenshot salvo como edit-page-screenshot.png');
    
    // Aguardar para visualizar
    console.log('‚è≥ Aguardando 15 segundos para visualiza√ß√£o...');
    await new Promise(resolve => setTimeout(resolve, 15000));
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await browser.close();
  }
}

testEditPage().catch(console.error);