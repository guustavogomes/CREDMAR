/**
 * Script para debuggar problemas de sess√£o e usu√°rio
 */

const { PrismaClient } = require('@prisma/client')
const db = new PrismaClient()

async function debugUserSession() {
  try {
    console.log('üîç Verificando usu√°rios no banco de dados...\n')

    // 1. Listar todos os usu√°rios
    const users = await db.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        status: true,
        createdAt: true
      }
    })

    console.log(`üìä Total de usu√°rios: ${users.length}`)
    console.log('\nüë• Usu√°rios cadastrados:')
    users.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.email} (${user.name})`)
      console.log(`      ID: ${user.id}`)
      console.log(`      Role: ${user.role}`)
      console.log(`      Status: ${user.status}`)
      console.log(`      Criado em: ${user.createdAt.toLocaleDateString('pt-BR')}`)
      console.log('')
    })

    // 2. Verificar se h√° problemas com IDs
    console.log('üîç Verificando integridade dos IDs...')
    for (const user of users) {
      if (!user.id || user.id.length < 10) {
        console.log(`‚ö†Ô∏è  Usu√°rio com ID suspeito: ${user.email} - ID: ${user.id}`)
      }
    }

    // 3. Verificar clientes por usu√°rio
    console.log('\nüìã Clientes por usu√°rio:')
    for (const user of users) {
      const customerCount = await db.customer.count({
        where: {
          userId: user.id,
          deletedAt: null
        }
      })
      console.log(`   ${user.email}: ${customerCount} clientes`)
    }

  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error)
  } finally {
    await db.$disconnect()
  }
}

// Executar o debug
debugUserSession()