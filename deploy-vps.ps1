# Script de Deploy para VPS - TaPago
# Executa o deploy das atualiza√ß√µes na VPS

Write-Host "üöÄ Iniciando Deploy na VPS..." -ForegroundColor Green
Write-Host "=" * 50

# Configura√ß√µes
$VPS_IP = "24.144.88.69"
$VPS_USER = "root"
$PROJECT_DIR = "/var/www/tapago"
$BACKUP_DIR = "/var/backups/tapago"

Write-Host "üìã INFORMA√á√ïES DO DEPLOY:" -ForegroundColor Yellow
Write-Host "VPS IP: $VPS_IP"
Write-Host "Usu√°rio: $VPS_USER"
Write-Host "Diret√≥rio: $PROJECT_DIR"
Write-Host ""

# Fun√ß√£o para executar comandos SSH
function Invoke-SSHCommand {
    param(
        [string]$Command,
        [string]$Description
    )
    
    Write-Host "üîß $Description..." -ForegroundColor Cyan
    Write-Host "Executando: $Command" -ForegroundColor Gray
    
    try {
        ssh ${VPS_USER}@${VPS_IP} $Command
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $Description - Conclu√≠do" -ForegroundColor Green
        } else {
            Write-Host "‚ùå $Description - Erro (Exit Code: $LASTEXITCODE)" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå $Description - Erro: $($_.Exception.Message)" -ForegroundColor Red
    }
    Write-Host ""
}

# Verificar conex√£o SSH
Write-Host "üîç Verificando conex√£o SSH..." -ForegroundColor Yellow
try {
    ssh -o ConnectTimeout=10 ${VPS_USER}@${VPS_IP} "echo 'Conex√£o SSH OK'"
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Conex√£o SSH estabelecida com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Falha na conex√£o SSH. Verifique:" -ForegroundColor Red
        Write-Host "  - IP da VPS: $VPS_IP" -ForegroundColor Red
        Write-Host "  - Chave SSH configurada" -ForegroundColor Red
        Write-Host "  - Firewall da VPS" -ForegroundColor Red
        exit 1
    }
} catch {
    Write-Host "‚ùå Erro na conex√£o SSH: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
Write-Host ""

# Comandos de deploy
Write-Host "üöÄ Iniciando processo de deploy..." -ForegroundColor Green

# 1. Criar backup
Invoke-SSHCommand "mkdir -p $BACKUP_DIR" "Criando diret√≥rio de backup"
Invoke-SSHCommand "cp -r $PROJECT_DIR $BACKUP_DIR/backup-$(date +%Y%m%d-%H%M%S)" "Criando backup do projeto atual"

# 2. Navegar para o diret√≥rio do projeto
Invoke-SSHCommand "cd $PROJECT_DIR && pwd" "Navegando para diret√≥rio do projeto"

# 3. Parar containers
Invoke-SSHCommand "cd $PROJECT_DIR && docker-compose down" "Parando containers Docker"

# 4. Fazer pull das atualiza√ß√µes
Invoke-SSHCommand "cd $PROJECT_DIR && git pull origin main" "Atualizando c√≥digo do reposit√≥rio"

# 5. Reconstruir e subir containers
Invoke-SSHCommand "cd $PROJECT_DIR && docker-compose up --build -d" "Reconstruindo e iniciando containers"

# 6. Verificar status dos containers
Invoke-SSHCommand "cd $PROJECT_DIR && docker-compose ps" "Verificando status dos containers"

# 7. Verificar logs
Invoke-SSHCommand "cd $PROJECT_DIR && docker-compose logs app --tail=10" "Verificando logs da aplica√ß√£o"

# 8. Teste de conectividade
Write-Host "üß™ Testando conectividade..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://$VPS_IP:3000" -TimeoutSec 30 -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Aplica√ß√£o respondendo na porta 3000!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Aplica√ß√£o respondeu com status: $($response.StatusCode)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå Erro ao testar conectividade: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "=" * 50
Write-Host "üéâ DEPLOY CONCLU√çDO!" -ForegroundColor Green
Write-Host "=" * 50
Write-Host "üåê URLs para testar:" -ForegroundColor Yellow
Write-Host "  - Aplica√ß√£o: http://$VPS_IP:3000" -ForegroundColor Cyan
Write-Host "  - Admin: http://$VPS_IP:3000/admin" -ForegroundColor Cyan
Write-Host "  - Login: admin@tapago.com / admin123" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "  1. Teste a aplica√ß√£o nas URLs acima" -ForegroundColor White
Write-Host "  2. Verifique se as novas funcionalidades est√£o funcionando" -ForegroundColor White
Write-Host "  3. Teste o sistema de toast e comprovantes" -ForegroundColor White
Write-Host "  4. Configure SSL se necess√°rio" -ForegroundColor White
Write-Host ""
Write-Host "‚úÖ Deploy finalizado com sucesso!" -ForegroundColor Green